<!DOCTYPE html>
<html>
    <title>
        WEB_APP_LANDING_PAGE
    </title>

    <head>

        <meta charset="utf-8">

        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
        
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

        <link rel="stylesheet" href="StylesCSS/styles.css">

        <script>
            window.addEventListener('DOMContentLoaded', function() {
              fetch('Elements/nav.htm')
                .then(response => response.text())
                .then(html => {
                  document.getElementById('NavBar').innerHTML = html;
                });
            });
        </script>

        <script src="/Elements/MouseOverMtd.js"></script>

    </head>

    
    <body id="DarkBG">

        <div class="pb-5" id="NavBar"></div>

        <div class="container">
            <h1 id="headlines">Essentials</h1>
            <h3 id="title">Naming conventions</h3>
            <p id="text">
                All java programmes need to contain a .CLASS file with the same name as the class in the .java file as shown in the example below.
            </p>
            <img src="Elements/Examples/Java/JavaFiles.PNG" alt="image showing that .CLASS file and .Java file have the same name HelloWorld">
            <div class="container">
                <p id="text">
                    Shown below is the code in the HelloWorld.java file.
                </p>
                <pre>
                    <code>
    public class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello World!!");
        }
    }
                    </code>
                </pre>
            </div>
        </div>

        <div class="container">
            <h1 id="headlines">Inheritance</h1>
            <h3 id="title">Superclass and Subclass</h3>
            <p id="text">
                class can be inherited so that similar classes do not have to be rewriten or duplicated making the code shorter
            </p>
            <pre>
                <code>
    class Vehicle() {
        <span id="code-comment">// Vehicle attribute</span>
        proteced String brand = "Ford";
        <span id="code-comment">// Vehicle method</span>
        public void honk() {                
            System.out.println("beep, beep");
        }
    }

    class Car extends Vehicle {
        <span id="code-comment">// Car subclass attribute added on to Vehicle superclass attribute</span>
        private String modelName = "Mustang";

        public static void main(String[] args) {
            <span id="code-comment">// Create a myCar object from the Car class</span>
            Car myCar = new Car();
            
            <span id="code-comment">/* honk method is able to be called upon because myCar was created with the "Car" class and honk() was inherited from the Vehicle superclass */</span>
            myCar.honk()

            <span id="code-comment">/*print out the brand variable inherited from Vehicle superclass and the modelName variable in the subclass*/</span>
            System.out.println(myCar.brand + " " + myCar.modelName);
        }
    } 
                </code>
            </pre>
        </div>
    </body>

</html>